name: release-on-main

on:
  push:
    branches: [ main, master ]

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # --- decide version from commits (same logic as before) ---
      - name: Determine next version
        id: semver
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            let latestTag = null;
            try { latestTag = (await github.rest.repos.getLatestRelease({ owner, repo })).data.tag_name; }
            catch (e) {
              const tags = await github.rest.repos.listTags({ owner, repo, per_page: 1 });
              if (tags.data.length > 0) latestTag = tags.data[0].name;
            }

            function parse(tag){ const m = /^v?(\d+)\.(\d+)\.(\d+)$/.exec(tag||''); return m?{major:+m[1],minor:+m[2],patch:+m[3]}:{major:0,minor:0,patch:0}; }
            const base = context.payload.before, head = context.payload.after;
            let commits=[];
            try { commits = (await github.rest.repos.compareCommits({owner,repo,base,head})).data.commits||[]; }
            catch (e) { if (context.payload.head_commit) commits=[context.payload.head_commit]; }

            let bump="patch";
            for (const c of commits) {
              const msg = (c.commit?.message || c.message || "").toLowerCase();
              const first = msg.split("\n")[0];
              if (msg.includes("breaking change") || /!\:/.test(first)) { bump="major"; break; }
              if (bump!=="major" && /^feat(\(|:)/.test(first)) bump="minor";
            }
            const cur=parse(latestTag); let next={...cur};
            if (!latestTag) next={major:0,minor:1,patch:0};
            else if (bump==="major") { next.major++; next.minor=0; next.patch=0; }
            else if (bump==="minor") { next.minor++; next.patch=0; }
            else { next.patch++; }
            const tag=`v${next.major}.${next.minor}.${next.patch}`;
            core.setOutput('tag', tag);
            core.setOutput('version', `${next.major}.${next.minor}.${next.patch}`);

      - name: Restore
        run: dotnet restore src/EdgeAuth/EdgeAuth.csproj

      - name: Build (Release)
        run: dotnet build src/EdgeAuth/EdgeAuth.csproj -c Release --no-restore

      - name: Package ZIP
        shell: bash
        run: |
          set -euo pipefail
          rm -rf dist
          mkdir -p dist/EdgeAuth
          cp src/EdgeAuth/bin/Release/net8.0/EdgeAuth.dll dist/EdgeAuth/
          cp src/EdgeAuth/plugin.json dist/EdgeAuth/
          ( cd dist && zip -r -9 "edgeauth-plugin-${{ steps.semver.outputs.tag }}.zip" EdgeAuth )
          echo "== dist listing =="
          ls -l dist
          echo "== zip contents =="
          unzip -l "dist/edgeauth-plugin-${{ steps.semver.outputs.tag }}.zip"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.semver.outputs.tag }}
          name: ${{ steps.semver.outputs.tag }}
          files: dist/edgeauth-plugin-${{ steps.semver.outputs.tag }}.zip
          fail_on_unmatched_files: true
          generate_release_notes: true
          make_latest: true
